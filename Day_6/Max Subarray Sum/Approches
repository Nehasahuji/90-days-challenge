/* Approch 1
Max Contigious Subarray Sum using three loops
Time Complexity: O(n^3)
Space Complexity: O(1)
----------------------------------
*/

 int maxSubArray(vector<int>& nums) {
      int maxSum=nums[0];
      for(int i=0;i<nums.size();i++){
          for(int j=i;j<nums.size();j++){
              int sum=nums[i];
              for(int k=i+1;k<=j;k++){
                  sum=sum+nums[k];
              }
              
              maxSum=max(maxSum,sum);
          }
      } 
    
    return maxSum;
   }


/* Approch 2
Max Contigious Subarray Sum using two loops
Time Complexity: O(n^2)
Space Complexity: O(1)
----------------------------------
*/

int maxSubArray(vector<int>& nums) {
        int MAX = INT_MIN;
        int sum = 0;
        for(int i = 0; i < nums.size(); i++) {
            sum += nums[i];
            MAX = max(sum, MAX);
            if(sum < 0) sum = 0;
        }
        return MAX;
    }


/* Approch 3
Max Contigious Subarray Sum using Kadane Algorithm 
Time Complexity: O(n)
Space Complexity: O(1)
----------------------------------
*/

int maxSubArray(vector<int>& nums) {
     int maxSum=nums[0],currSum=nums[0];
     for(int i=1;i<nums.size();i++){
        currSum=max(currSum+nums[i],nums[i]);
        maxSum=max(currSum,maxSum);
     }
        
    return maxSum;
 }