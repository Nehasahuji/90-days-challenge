/* Naive Solution
Time Complexity O(n^2)
Space Complexity O(1)
*/

int trap(vector<int>& height) {
        int res=0;
        int n=height.size(); 
        for(int i=1;i<n-1;i++){
            
            int lmax=height[i];
        
            for(int j=0;j<i;j++){
               lmax=max(lmax,height[j]); 
            }
            
        
            int rmax=height[i];
            
            for(int j=i+1;j<n;j++){
                rmax=max(rmax,height[j]);
            }
            
        res=res+min(lmax,rmax)-height[i];
            
        }
        
return res;

/*Efficient Solution
using DP
Time Complexity O(n)
Space Complexity O(1)
*/

int trap(vector<int>& height) {
        int n=height.size();
        int lmax[n];
        lmax[0]=height[0];
        for(int i=1;i<n;i++){
            lmax[i]=max(lmax[i-1],height[i]);
        }
        
    
        int rmax[n];
        rmax[n-1]=height[n-1];
        for(int i=n-2;i>0;i--){
            rmax[i]=max(rmax[i+1],height[i]);
        }
        
        int res=0;
        for(int i=1;i<n-1;i++){
            res=res+min(lmax[i],rmax[i])-height[i];
        }
        
        return res;
 }
 
/* Efficient Solution
using two pointer approch
Time Complexity O(n)
Space Complexity O(1)
*/

int trap(vector<int>& height) {
        
        int res=0;
        int size=height.size();
        
        int left=0,right=size-1;
        int leftMax=0,rightMax=0;
        
        while(left<right){
            if(height[left]<height[right]){
               if(height[left]>=leftMax){
                   leftMax=height[left];
               } else{
                   res+=leftMax-height[left];
               }
                
              ++left;
            }else{
                if(height[right]>=rightMax){
                    rightMax=height[right];
                }else{
                    res+=rightMax-height[right];
                }
                --right;
            }
            
        }
        return res;
	}
 
 
//also check solution using stack after completing stack part